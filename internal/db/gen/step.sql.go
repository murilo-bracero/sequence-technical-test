// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: step.sql

package dao

import (
	"context"

	"github.com/google/uuid"
)

const createStep = `-- name: CreateStep :one
INSERT INTO steps (mail_subject, mail_content, sequence_id) 
VALUES ($1, $2, $3)
RETURNING id, external_id, mail_subject, mail_content, sequence_id
`

type CreateStepParams struct {
	MailSubject string `json:"mail_subject"`
	MailContent string `json:"mail_content"`
	SequenceID  int32  `json:"sequence_id"`
}

func (q *Queries) CreateStep(ctx context.Context, arg CreateStepParams) (Step, error) {
	row := q.db.QueryRow(ctx, createStep, arg.MailSubject, arg.MailContent, arg.SequenceID)
	var i Step
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.MailSubject,
		&i.MailContent,
		&i.SequenceID,
	)
	return i, err
}

type CreateStepsParams struct {
	ExternalID  uuid.UUID `json:"external_id"`
	MailSubject string    `json:"mail_subject"`
	MailContent string    `json:"mail_content"`
	SequenceID  int32     `json:"sequence_id"`
}

const deleteStep = `-- name: DeleteStep :exec
DELETE FROM steps 
WHERE external_id = $1
`

func (q *Queries) DeleteStep(ctx context.Context, externalID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteStep, externalID)
	return err
}

const getStepById = `-- name: GetStepById :one
SELECT steps.id, steps.external_id, steps.mail_subject, steps.mail_content, steps.sequence_id FROM steps
JOIN sequences ON steps.sequence_id = sequences.id AND sequences.external_id = $2
WHERE steps.external_id = $1
`

type GetStepByIdParams struct {
	ExternalID   uuid.UUID `json:"external_id"`
	ExternalID_2 uuid.UUID `json:"external_id_2"`
}

func (q *Queries) GetStepById(ctx context.Context, arg GetStepByIdParams) (Step, error) {
	row := q.db.QueryRow(ctx, getStepById, arg.ExternalID, arg.ExternalID_2)
	var i Step
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.MailSubject,
		&i.MailContent,
		&i.SequenceID,
	)
	return i, err
}

const updateStep = `-- name: UpdateStep :one
UPDATE steps 
SET mail_subject = $2, mail_content = $3 
WHERE external_id = $1 
RETURNING id, external_id, mail_subject, mail_content, sequence_id
`

type UpdateStepParams struct {
	ExternalID  uuid.UUID `json:"external_id"`
	MailSubject string    `json:"mail_subject"`
	MailContent string    `json:"mail_content"`
}

func (q *Queries) UpdateStep(ctx context.Context, arg UpdateStepParams) (Step, error) {
	row := q.db.QueryRow(ctx, updateStep, arg.ExternalID, arg.MailSubject, arg.MailContent)
	var i Step
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.MailSubject,
		&i.MailContent,
		&i.SequenceID,
	)
	return i, err
}
