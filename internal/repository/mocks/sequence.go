// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/sequence.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/sequence.go -destination=internal/repository/mocks/sequence.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/murilo-bracero/sequence-technical-test/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSequenceRepository is a mock of SequenceRepository interface.
type MockSequenceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSequenceRepositoryMockRecorder
	isgomock struct{}
}

// MockSequenceRepositoryMockRecorder is the mock recorder for MockSequenceRepository.
type MockSequenceRepositoryMockRecorder struct {
	mock *MockSequenceRepository
}

// NewMockSequenceRepository creates a new mock instance.
func NewMockSequenceRepository(ctrl *gomock.Controller) *MockSequenceRepository {
	mock := &MockSequenceRepository{ctrl: ctrl}
	mock.recorder = &MockSequenceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequenceRepository) EXPECT() *MockSequenceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSequenceRepository) Create(ctx context.Context, model *models.SequenceWithSteps) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSequenceRepositoryMockRecorder) Create(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSequenceRepository)(nil).Create), ctx, model)
}

// Delete mocks base method.
func (m *MockSequenceRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSequenceRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSequenceRepository)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockSequenceRepository) FindAll(ctx context.Context, limit, offset int) ([]*models.SequenceWithSteps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, limit, offset)
	ret0, _ := ret[0].([]*models.SequenceWithSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSequenceRepositoryMockRecorder) FindAll(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSequenceRepository)(nil).FindAll), ctx, limit, offset)
}

// FindByExternalId mocks base method.
func (m *MockSequenceRepository) FindByExternalId(ctx context.Context, id uuid.UUID) (*models.SequenceWithSteps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByExternalId", ctx, id)
	ret0, _ := ret[0].(*models.SequenceWithSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByExternalId indicates an expected call of FindByExternalId.
func (mr *MockSequenceRepositoryMockRecorder) FindByExternalId(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByExternalId", reflect.TypeOf((*MockSequenceRepository)(nil).FindByExternalId), ctx, id)
}

// Update mocks base method.
func (m *MockSequenceRepository) Update(ctx context.Context, model *models.SequenceWithSteps) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSequenceRepositoryMockRecorder) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSequenceRepository)(nil).Update), ctx, model)
}
