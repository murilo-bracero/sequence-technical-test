// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/step.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/step.go -destination=internal/repository/mocks/step.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dao "github.com/murilo-bracero/sequence-technical-test/internal/db/gen"
	gomock "go.uber.org/mock/gomock"
)

// MockStepRepository is a mock of StepRepository interface.
type MockStepRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStepRepositoryMockRecorder
	isgomock struct{}
}

// MockStepRepositoryMockRecorder is the mock recorder for MockStepRepository.
type MockStepRepositoryMockRecorder struct {
	mock *MockStepRepository
}

// NewMockStepRepository creates a new mock instance.
func NewMockStepRepository(ctrl *gomock.Controller) *MockStepRepository {
	mock := &MockStepRepository{ctrl: ctrl}
	mock.recorder = &MockStepRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStepRepository) EXPECT() *MockStepRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStepRepository) Create(ctx context.Context, model *dao.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStepRepositoryMockRecorder) Create(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStepRepository)(nil).Create), ctx, model)
}

// Delete mocks base method.
func (m *MockStepRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStepRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStepRepository)(nil).Delete), ctx, id)
}

// FindOne mocks base method.
func (m *MockStepRepository) FindOne(ctx context.Context, sequenceID, stepID uuid.UUID) (*dao.Step, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, sequenceID, stepID)
	ret0, _ := ret[0].(*dao.Step)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockStepRepositoryMockRecorder) FindOne(ctx, sequenceID, stepID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockStepRepository)(nil).FindOne), ctx, sequenceID, stepID)
}

// Update mocks base method.
func (m *MockStepRepository) Update(ctx context.Context, model *dao.Step) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStepRepositoryMockRecorder) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStepRepository)(nil).Update), ctx, model)
}
